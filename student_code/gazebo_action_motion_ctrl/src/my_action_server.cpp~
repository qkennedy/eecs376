// example_action_server: 2nd version, includes "cancel" and "feedback"
// expects client to give an integer corresponding to a timer count, in seconds
// server counts up to this value, provides feedback, and can be cancelled any time
// re-use the existing action message, although not all fields are needed
// use request "input" field for timer setting input, 
// value of "fdbk" will be set to the current time (count-down value)
// "output" field will contain the final value when the server completes the goal request

#include<ros/ros.h>
#include <actionlib/server/simple_action_server.h>
//the following #include refers to the "action" message defined for this package
// The action message can be found in: .../example_action_server/action/demo.action
// Automated header generation creates multiple headers for message I/O
// These are referred to by the root name (demo) and appended name (Action)
#include<gazebo_action_motion_ctrl/pathAction.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <iostream>
#include <string>
#include <math.h>

int g_count = 0;
bool g_count_failure = false;
double g_move_speed = 1.0; // set forward speed to this value, e.g. 1m/s
double g_spin_speed = 1.0; // set yaw rate to this value, e.g. 1 rad/s
double g_sample_dt = 0.01;
double g_dist_tol = 0.01; // 1cm
geometry_msgs::Pose g_curr_pose;
geometry_msgs::Twist g_twist_cmd;

ros::Publisher g_twist_commander; //global publisher object 

class MyActionServer {
private:

    ros::NodeHandle nh_; // we'll need a node handle; get one upon instantiation

    // this class will own a "SimpleActionServer" called "as_".
    // it will communicate using messages defined in example_action_server/action/demo.action
    // the type "demoAction" is auto-generated from our name "demo" and generic name "Action"
    actionlib::SimpleActionServer<gazebo_action_motion_ctrl::pathAction> as_;

    // here are some message types to communicate with our client(s)
    gazebo_action_motion_ctrl::pathGoal goal_; // goal message, received from client
    gazebo_action_motion_ctrl::pathResult result_; // put results here, to be sent back to the client when done w/ goal
    gazebo_action_motion_ctrl::pathFeedback feedback_; // for feedback 
    //  use: as_.publishFeedback(feedback_); to send incremental feedback to the client


public:
    MyActionServer(); //define the body of the constructor outside of class definition

    ~MyActionServer(void) {
    }
    // Action Interface
    void executeCB(const actionlib::SimpleActionServer<gazebo_action_motion_ctrl::pathAction>::GoalConstPtr& goal);

};

//implementation of the constructor:
// member initialization list describes how to initialize member as_
// member as_ will get instantiated with specified node-handle, name by which this server will be known,
//  a pointer to the function to be executed upon receipt of a goal.
//  
// Syntax of naming the function to be invoked: get a pointer to the function, called executeCB, 
// which is a member method of our class exampleActionServer.  
// Since this is a class method, we need to tell boost::bind that it is a class member,
// using the "this" keyword.  the _1 argument says that our executeCB function takes one argument
// The final argument,  "false", says don't start the server yet.  (We'll do this in the constructor)

MyActionServer::MyActionServer() :
as_(nh_, "my_action", boost::bind(&MyActionServer::executeCB, this, _1), false)
// in the above initialization, we name the server "example_action"
//  clients will need to refer to this name to connect with this server
{
    ROS_INFO("in constructor of exampleActionServer...");
    // do any other desired initializations here...specific to your implementation

    as_.start(); //start the server running
}

//executeCB implementation: this is a member method that will get registered with the action server
// argument type is very long.  Meaning:
// actionlib is the package for action servers
// SimpleActionServer is a templated class in this package (defined in the "actionlib" ROS package)
// <example_action_server::demoAction> customizes the simple action server to use our own "action" message 
// defined in our package, "example_action_server", in the subdirectory "action", called "demo.action"
// The name "demo" is prepended to other message types created automatically during compilation.
// e.g.,  "demoAction" is auto-generated from (our) base name "demo" and generic name "Action"

double sgn(double x) {
    if (x > 0.0) {
        return 1.0;
    } else if (x < 0.0) {
        return -1.0;
    } else {
        return 0.0;
    }
}
// a useful conversion function: from quaternion to yaw

double convertPlanarQuat2Phi(geometry_msgs::Quaternion quaternion) {
    double quat_z = quaternion.z;
    double quat_w = quaternion.w;
    double phi = 2.0 * atan2(quat_z, quat_w); // cheap conversion from quaternion to heading for planar motion
    return phi;
}

//and the other direction:

geometry_msgs::Quaternion convertPlanarPhi2Quaternion(double phi) {
    geometry_msgs::Quaternion quaternion;
    quaternion.x = 0.0;
    quaternion.y = 0.0;
    quaternion.z = sin(phi / 2.0);
    quaternion.w = cos(phi / 2.0);
    return quaternion;
}

void do_halt() {
    ros::Rate loop_timer(1 / g_sample_dt);
    ROS_INFO("Halting");
    g_twist_cmd.angular.z = 0.0;
    g_twist_cmd.linear.x = 0.0;
    for (int i = 0; i < 100; i++) {
        g_twist_commander.publish(g_twist_cmd);
        loop_timer.sleep();
    }
}

void do_spin(double spin_ang) {
    ROS_INFO("Spinning: %f", spin_ang);
    ros::Rate loop_timer(1 / g_sample_dt);
    double timer = 0.0;
    double final_time = fabs(spin_ang) / g_spin_speed;
    g_twist_cmd.angular.z = sgn(spin_ang) * g_spin_speed;
    while (timer < final_time) {
        g_twist_commander.publish(g_twist_cmd);
        timer += g_sample_dt;
        loop_timer.sleep();
    }
    do_halt();
}

void do_move(double distance) { // always assumes robot is already oriented properly
    // but allow for negative distance to mean move backwards
    ros::Rate loop_timer(1 / g_sample_dt);
   ROS_INFO("Moving %f",distance);
    double timer = 0.0;
    double final_time = fabs(distance) / g_move_speed;
    g_twist_cmd.angular.z = 0.0; //stop spinning
    g_twist_cmd.linear.x = sgn(distance) * g_move_speed;
    while (timer < final_time) {
        g_twist_commander.publish(g_twist_cmd);
        timer += g_sample_dt;
        loop_timer.sleep();
    }
    do_halt();
}

double min_spin(double spin_angle) {
    if (spin_angle > M_PI) {
        spin_angle -= 2.0 * M_PI;
    }
    if (spin_angle< -M_PI) {
        spin_angle += 2.0 * M_PI;
    }
    return spin_angle;
}

void get_yaw_and_dist(geometry_msgs::Pose curr_pose, geometry_msgs::Pose goal_pose, double &dist, double &heading) {
    double x_dist = goal_pose.position.x - curr_pose.position.x;
    double y_dist = goal_pose.position.y - curr_pose.position.y;
    dist = sqrt((x_dist * x_dist)+(y_dist * y_dist));
    if (dist < g_dist_tol) { //too small of a motion, so just set the heading from goal heading
        heading = convertPlanarQuat2Phi(goal_pose.orientation);
    } else {
        heading = atan2(y_dist, x_dist);
    }

}

void MyActionServer::executeCB(const actionlib::SimpleActionServer<gazebo_action_motion_ctrl::pathAction>::GoalConstPtr& goal) {
    ROS_INFO("in executeCB");
    do_halt();
    double yaw_desired, yaw_current, travel_distance, spin_angle;
    geometry_msgs::Pose pose_desired;
    // Loop Handles poses, finds heading, moves there
    int npts = goal->nav_path.poses.size();
    for (int i = 0; i < npts; i++) { //visit each subgoal
        pose_desired = goal->nav_path.poses[i].pose; //get next pose from vector of poses

        get_yaw_and_dist(g_curr_pose, pose_desired, travel_distance, yaw_desired);
        yaw_current = convertPlanarQuat2Phi(g_curr_pose.orientation);
	ROS_INFO("Yaw Curr=%f",yaw_current);        
	spin_angle = yaw_desired - yaw_current; // spin this much
        spin_angle = min_spin(spin_angle); // but what if this angle is > pi?  then go the other way
	        
	do_spin(spin_angle); // carry out this incremental action        
        yaw_current = yaw_desired;
        g_curr_pose.orientation = convertPlanarPhi2Quaternion(yaw_desired);	
        do_move(travel_distance);
        g_curr_pose.position = pose_desired.position;
        ROS_INFO("pose %d END: final yaw = %f; final (x,y) = (%f,%f)", i, yaw_desired,
                pose_desired.position.x, pose_desired.position.y);
        feedback_.curr_pos = g_curr_pose; // populate feedback message with current countdown value
        as_.publishFeedback(feedback_);
    }

    // each iteration, check if cancellation has been ordered
    if (as_.isPreemptRequested()) {
        ROS_WARN("goal cancelled!");
        result_.final_pose = g_curr_pose;
	do_halt();
        as_.setAborted(result_); // tell the client we have given up on this goal; send the result message as well
        return; // done with callback
    }


    //if we survive to here, then the goal was successfully accomplished; inform the client
    result_.final_pose = g_curr_pose; //value should be zero, if completed countdown
    as_.setSucceeded(result_); // return the "result" message to client, along with "success" status
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "action_server_node"); // name this node 

    ros::NodeHandle n;
    g_twist_commander = n.advertise<geometry_msgs::Twist>("/cmd_vel", 1); 
    MyActionServer as_object; // create an instance of the class "ExampleActionServer"

    ROS_INFO("going into spin");
    // from here, all the work is done in the action server, with the interesting stuff done within "executeCB()"
    // you will see 5 new topics under example_action: cancel, feedback, goal, result, status
    ros::spin();

    return 0;
}

